package Fedor.les02_03Classes;

public class Tea {    // 1. создаем класс Tea
    int weight = 0;  // 2. инициалицируем переменные для экземпляров классов: (строки 4-6)
    String sort = "Green";
    static String onlineStore = "https://greenlife.com";

    /*          3. создаем конструктор если его нет, то будет по умолчанию - default? почтитат и переделать примеры https://javarush.ru/groups/posts/konstruktory-v-java-1
    public Tea() {   4. выполнение содержания конструктора (если есть)
     this();     }    */

    public int getWeight() {
        return this.weight;
    }

    public String getSort() {
        return this.sort;
    }

    public void setSort(String newSort) { //создаем метод setSort
        this.sort = newSort;
    }

    public void setWeight(int newWeight) { //создаем метод setWeight
        this.weight = newWeight;
    }

    public void print() { //создаем метод print
        System.out.printf("{sort:%s; weight:%d}\n", this.sort, this.weight);
    }
}
// теперь напиши метод setSort, который принимает 1 параметр и передает его в sort. Метод ничего не возвращает
/* Конструктор – это схожая  c методом структура, назначение которой состоит в создании экземпляра класса.
Характеристики конструктора:
- Имя конструктора должно совпадать с именем класса (по договоренности, первая буква — заглавная, обычно имя существительное);
- Конструктор имеется в любом классе. Даже если вы его не написали, компилятор Java сам создаст конструктор по умолчанию (default constructor), который будет пустым и не делает ничего, кроме вызова конструктора суперкласса.
- Конструктор похож на метод, но не является методом, он даже не считается членом класса. Поэтому его нельзя наследовать или переопределить в подклассе;
- Конструкторы не наследуются;
- Конструкторов может быть несколько в классе. В этом случае конструкторы называют перегруженными;
- Если в классе не описан конструктор, компилятор автоматически добавляет в код конструктор без параметров;
- Конструктор не имеет возвращаемого типа, им не может быть даже тип void, если возвращается тип void, то это уже не конструктор а метод, несмотря на совпадение с именем класса.
- В конструкторе допускается оператор return, но только пустой, без всякого возвращаемого значения;
- В конструкторе допускается применение модификаторов доступа, можно задать один из модификаторов: public, protected, private или без модификатора.
- Конструктор не может иметь модификаторов abstract, final, native, static или synchronized;
- Ключевое слово this cсылается на другой конструктор в этом же классе. Если используется, то обращение должно к нему быть первой строкой конструктора;
- Ключевое слово super вызывает конструктор родительского класса. Если используется, должно обращение к нему быть первой строкой конструктора;
- Если конструктор не делает вызов конструктора super класса-предка (с аргументами или без аргументов), компилятор автоматически добавляет код вызова конструктора класса-предка без аргументов*/