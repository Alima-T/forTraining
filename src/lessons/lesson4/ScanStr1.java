package lessons.lesson4;  //Ссылочные типы внутри JDK и только они пишутся с Большой буквы String, Scanner... внутри JDK
//  и каждый ссылочный тип имеет свой набор функционала.


import java.util.Scanner;

public class ScanStr1 {
    public static void main(String[] args) {
        //1-й вариант набираем Scanner из library.
        // All standard Reference Types from JDK libraries in parentheses begin with the words java (examples: (java.util), (java.swing),
        // если начинаются с любых других букв, это добавленная библиотека, ее нужно докачивать, дорабатывать под себя и т.д. пока их не трогаем)
        // Scanner - reference, который считывает данные с БД, файла, клавиатуры... со всего
        //Как только мы вбрали автоматически появляется первая строка импорт сверху кода "import java.util.Scanner;".
        //Import - импортировать - подтянуть это ссылка на файл с кодом, если нажать на первую папку, то увидим, что она содержит внутри еще много других папок со своими данными,
        // выбираем нужный тип данных, выделяем и нажимаем Fn + F4 or F4, откроется новый файл с исходным кодом данного типа, его можно использовать, но редактировать невозможно.
        // Чтобы им пользоваться мы и импортируем его. Если удалить импорт строку, то комп. выдает ошибку, необходимо указать какой -
        // Чтобы исправить ошибку и проимпортировать тип: нажать на alt+Enter, и выбрать import.class и выдает 3 возможных варианта импорта, выбираем java.util - standard library
        // Scanner scanner = new Scanner (): - скобки  подчеркнулись красным, значит в них обязательно нужно указать откуда (с клавиатуры, консоли или файла) борать данные для экранирования.
        // System - это обращение к компьютеру, у него два объекта: in - клавиатура компьютера, out - клавиатура консоли

        //Scanner scanner = new Scanner(System.in);


        //2-й вариант: формула создания объекта ссылочного типа. Всегда обязательная. System - указание на тип переменной текст,
        // затем new (рождается новый (здесь) объект), затем указать тип, который мы создаем - здесь снова String/
        //После слова String идут скобки() пишем " (двойные ковычки), компьютер динамически подстраивается и выдает:
        //original: "" - вписываем в ковычки свой текст
        //Почему в String не прописалась строка импорт сверху?
        //java.lang. - это одна пака из всех, которая подключается к любому файлу автоматически,
        // т.е. мы не подключали ее, она идет по умолчанию и поэтому не прописывается доп.строкой сверху как импорт, но импортируется.
        // Внутри нее есть ряд типов String, System, Math etc., в которых импорт идет по умолчанию и  не прописывается доп.верхней строкой

        //String text = new String("Hello");
        // String text = "Hello" - исключение для String, когда не обязательно писать new String, а сразу набираеть текст

        //если напечатать тип text, scanner или другой обозначенный ранее и поставить точку . ,
        // то появляются все методы с функционалом, относящимся к данному типу (сравнить символы, узнать длину символа и т.д.
        // в случае с text - next () nextInt next (Pattern pattern) hasNext (String Pattern)
        // void - не требует отдачи возврата текста или данных.
        // в случае со scanner чаще всего используется next (считать всю строчку введенную пользователем на другой стороне до Enter)
        // при этом если нам нужен текст, то набрать в начале строки String, если же нужны цифры, то выбираем nextInt и в начале строки обязательно int

        Scanner scanner1 = new Scanner(System.in); // Scanner - это тип, scanner - это объект,
        Scanner scanner2 = new Scanner(System.in); // может быть scanner1, scanner2 и т.д., например это разные люди

        System.out.println("Привет, как тебя зовут?");
        String inputName = scanner1.next();                                                // input - входные данные
        System.out.printf("Приятно познакомиться,%s \n", inputName);

        // printf - выдает отформатированном формате, внтрь текста можем добавить дополнительную переменную
        // %s- если переменная - текст ,
        // %d- если переменная - число%x: для вывода шестнадцатеричных чисел
        // %f: для вывода чисел с плавающей точкой
        // %e: для вывода чисел в экспоненциальной форме, например, 1.3e+01
        // %c: для вывода одиночного символа
        // %s: для вывода строковых значений

    }

}


